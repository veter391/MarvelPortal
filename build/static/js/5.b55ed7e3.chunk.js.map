{"version":3,"sources":["components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","components/pages/SingleComicPage.js"],"names":["ErrorMessage","_jsx","src","img","alt","style","display","width","height","objectFit","margin","useMarvelService","_useHttp","_useState","useState","_useState2","_slicedToArray","loading","setLoading","_useState3","_useState4","error","setError","request","useCallback","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","url","method","body","headers","response","data","_args","arguments","wrap","_context","prev","next","length","undefined","fetch","sent","ok","Error","concat","status","json","abrupt","t0","message","stop","_x","apply","clearError","useHttp","_apiBase","_apiKey","getAllCharacters","num","offset","res","results","map","_transformCharacter","_x2","getCharacter","_ref2","_callee2","id","_context2","_x3","getAllComics","_ref3","_callee3","_args3","_context3","_transformComics","getComic","_ref4","_callee4","_context4","_x4","char","name","description","thumbnail","path","extension","homepage","urls","wiki","comics","items","slice","_comics$textObjects$","title","pageCount","language","textObjects","price","prices","View","comic","_jsxs","className","children","Link","to","SingleComic","comicId","useParams","setComic","_useMarvelService","useEffect","updateComic","then","onComicLoaded","errorMessage","spinner","Spinner","content","_Fragment"],"mappings":"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","file":"static/js/5.b55ed7e3.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        // <img src={process.env.PUBLIC_URL + '/error.gif'} alt=\"error\" /> exemple how tu use info from global folder\r\n        <img src={img} alt=\"error\" style={{display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto'}}/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useHttp } from \"../hooks/http.hook\";\r\n\r\n\r\nconst useMarvelService = () => {\r\n\r\n    const { loading, request, error, clearError } = useHttp()\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/'\r\n    // personal api key\r\n    const _apiKey = 'apikey=d0cba7230807643ac1c3837fafb40afd'\r\n\r\n    // find all characters\r\n    const getAllCharacters = async (num, offset) => {\r\n        const res = await request(`${_apiBase}characters?limit=${num}&offset=${offset}&${_apiKey}`);\r\n\r\n        // map return callback function to each element is the same => ''.map(item => _transformCharacter(item))''\r\n        return res.data.results.map(_transformCharacter); \r\n    }\r\n\r\n    // return character with uniq id\r\n    const getCharacter = async id => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n\r\n        // return transformed element\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getAllComics = async (offset = 0) => {\r\n        const res = await request(\r\n            `${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`\r\n        );\r\n        return res.data.results.map(_transformComics);\r\n    };\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComics(res.data.results[0]);\r\n    };\r\n\r\n    // if function or variable starts with '_' be careful with changes!! try to NOT CHANGE IT\r\n    const _transformCharacter = (char) => {\r\n        // transform and return new object and add this to state(obj)\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? char.description : 'Not info about this character !',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items.length === 0 ? [{name: 'Not comics about this character !'}] : char.comics.items.slice(0, 10)\r\n        }\r\n    }\r\n\r\n    const _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            description: comics.description || \"There is no description\",\r\n            pageCount: comics.pageCount\r\n                ? `${comics.pageCount} p.`\r\n                : \"No information about the number of pages\",\r\n            thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n            language: comics.textObjects[0]?.language || \"en-us\",\r\n            price: comics.prices[0].price\r\n                ? `${comics.prices[0].price}$`\r\n                : \"not available\",\r\n        };\r\n    };\r\n\r\n    // return usable service variables\r\n    return { loading, error, getAllCharacters, getCharacter, clearError, getAllComics, getComic }\r\n\r\n}\r\n\r\n\r\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\r\n\r\nexport function useHttp() {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n\r\n        // before to send a request, setting loading(true)\r\n        setLoading(true);\r\n\r\n        try {\r\n            const response = await fetch(url, { method, body, headers });\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`)\r\n            }\r\n            \r\n            const data = await response.json();\r\n\r\n            // if everything gone okay disable loading\r\n            setLoading(false);\r\n            return data;\r\n\r\n        } catch (error) {\r\n            // if error disable loading\r\n            setLoading(false);\r\n            setError(error.message);\r\n            throw error;\r\n        }\r\n\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => setError(null), []);\r\n\r\n    return {loading, request, error, clearError}\r\n}","import { useEffect, useState } from 'react';\r\nimport { useParams, Link } from 'react-router-dom';\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './singleComicPage.scss';\r\n\r\nconst SingleComic = () => {\r\n    const { comicId } = useParams();\r\n    const [ comic, setComic ] = useState(null);\r\n    const { loading, error, getComic, clearError } = useMarvelService(); // add service to variable and create instance of it\r\n\r\n    useEffect(() => {\r\n        updateComic();\r\n    }, [comicId]);\r\n\r\n    const updateComic = () => {\r\n        clearError();\r\n        getComic(comicId)\r\n            .then(onComicLoaded)\r\n    }\r\n\r\n    // change info when is loaded\r\n    const onComicLoaded = comic => {\r\n        // change state.char and add new obj\r\n        setComic(comic);\r\n    };\r\n\r\n\r\n    const\r\n        // if exist error return error\r\n        errorMessage = error ? <ErrorMessage /> : null,\r\n        // if wait info from server return spinner\r\n        spinner = loading ? <Spinner /> : null,\r\n        // if doesn't exist error and spinner is null return content\r\n        content = !(loading || error || !comic) ? <View comic={comic} /> : null\r\n\r\n    return (\r\n        <>\r\n            {errorMessage}\r\n            {spinner}\r\n            {content}\r\n        </>\r\n    )\r\n}\r\n\r\nconst View = ({comic}) => {\r\n    const {title, description, pageCount, thumbnail, language, price} = comic;\r\n\r\n    return (\r\n        <div className=\"single-comic\">\r\n            <img src={thumbnail} alt={title} className=\"single-comic__img\" />\r\n            <div className=\"single-comic__info\">\r\n                <h2 className=\"single-comic__name\">{title}</h2>\r\n                <p className=\"single-comic__descr\">{description}</p>\r\n                <p className=\"single-comic__descr\">{pageCount}</p>\r\n                <p className=\"single-comic__descr\">Language: {language}</p>\r\n                <div className=\"single-comic__price\">{price}</div>\r\n            </div>\r\n            <Link to='/comics' className=\"single-comic__back\">Back to all</Link>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SingleComic;"],"sourceRoot":""}