{"version":3,"sources":["components/appHeader/AppHeader.js","services/MarvelService.js","components/spinner/Spinner.js","components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","resources/img/mjolnir.png","components/randomChar/RandomChar.js","resources/img/abyss.jpg","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","resources/img/vision.png","components/errorBoundary/ErrorBoundary.js","components/app/App.js","index.js"],"names":["AppHeader","_jsxs","className","children","_jsx","href","MarvelService","_this","_classCallCheck","_apiBase","_apiKey","getrecorce","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","url","res","wrap","_context","prev","next","fetch","sent","ok","Error","concat","status","json","abrupt","stop","_x","apply","arguments","getAllCharacters","_callee2","_context2","data","results","map","_transformCharacter","getCharacter","_ref3","_callee3","id","_context3","_x2","char","name","description","thumbnail","path","extension","homepage","urls","wiki","comics","items","length","slice","Spinner","xmlns","style","margin","background","display","width","height","viewBox","preserveAspectRatio","transform","cx","cy","r","fill","fillOpacity","attributeName","type","begin","values","keyTimes","dur","repeatCount","ErrorMessage","src","img","alt","objectFit","RandomChar","_Component","_inherits","_super","_createSuper","props","call","state","loading","error","marvelService","onCharLoaded","setState","onError","updateChar","Math","floor","random","then","catch","_createClass","key","value","this","_this$state","errorMessage","spinner","content","View","onClick","mjolnir","Component","imgStyle","CharList","_len","args","Array","_key","list","selected","onFilterSame","arr","some","el","newRandomChar","onCharGenerate","abyss","console","log","charInfo","_toConsumableArray","renderItems","newList","item","i","onCharSelected","onAddChars","num","undefined","_this2","Skeleton","_Fragment","CharInfo","charId","prevProps","prevStates","skeleton","ErrorBoundary","errorInfo","App","selectedChar","decoration","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7ad2d21a.chunk.js","sourcesContent":["import './appHeader.scss';\n\nconst AppHeader = () => {\n    return (\n        <header className=\"app__header\">\n            <h1 className=\"app__title\">\n                <a href=\"#\">\n                    <span>Marvel</span> information portal\n                </a>\n            </h1>\n            <nav className=\"app__menu\">\n                <ul>\n                    <li><a href=\"#\">Characters</a></li>\n                    /\n                    <li><a href=\"#\">Comics</a></li>\n                </ul>\n            </nav>\n        </header>\n    )\n}\n\nexport default AppHeader;","\r\n\r\nclass MarvelService {\r\n\r\n    _apiBase = 'https://gateway.marvel.com:443/v1/public/'\r\n    // personal api key\r\n    _apiKey = 'apikey=d0cba7230807643ac1c3837fafb40afd'\r\n\r\n    getrecorce = async url => {\r\n        let res = await fetch(url);\r\n\r\n        if (!res.ok) {\r\n            throw new Error(`Could not fetch ${url}, status: ${res.status}`)\r\n        }\r\n\r\n        // return promice\r\n        return await res.json();\r\n    }\r\n\r\n    // find all characters\r\n    getAllCharacters = async () => {\r\n        const res = await this.getrecorce(`${this._apiBase}characters?limit=9&offset=210&${this._apiKey}`);\r\n\r\n        // map return callback function to each element is the same => ''.map(item => this._transformCharacter(item))''\r\n        return res.data.results.map(this._transformCharacter); \r\n    }\r\n\r\n    // return character with uniq id\r\n    getCharacter = async id => {\r\n        const res = await this.getrecorce(`${this._apiBase}characters/${id}?${this._apiKey}`);\r\n\r\n        // return transformed element\r\n        return this._transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    // if function or variable starts with '_' be careful with changes!! try to NOT CHANGE IT\r\n    _transformCharacter = (char) => {\r\n        // transform and return new object and add this to state(obj)\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? char.description : 'Not info about this character !',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items.length === 0 ? [{name: 'Not comics about this character !'}] : char.comics.items.slice(0, 10)\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default MarvelService;","const Spinner = () => {\r\n    return (\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" style={{margin: '0 auto', background: 'none', display: 'block'}} width=\"200px\" height=\"200px\" viewBox=\"0 0 100 100\" preserveAspectRatio=\"xMidYMid\">\r\n            <g transform=\"translate(80,50)\">\r\n            <g transform=\"rotate(0)\">\r\n            <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#1c4595\" fillOpacity=\"1\">\r\n            <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"-0.875s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\r\n            <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"-0.875s\"></animate>\r\n            </circle>\r\n            </g>\r\n            </g><g transform=\"translate(71.21320343559643,71.21320343559643)\">\r\n            <g transform=\"rotate(45)\">\r\n            <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#1c4595\" fillOpacity=\"0.875\">\r\n            <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"-0.75s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\r\n            <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"-0.75s\"></animate>\r\n            </circle>\r\n            </g>\r\n            </g><g transform=\"translate(50,80)\">\r\n            <g transform=\"rotate(90)\">\r\n            <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#1c4595\" fillOpacity=\"0.75\">\r\n            <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"-0.625s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\r\n            <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"-0.625s\"></animate>\r\n            </circle>\r\n            </g>\r\n            </g><g transform=\"translate(28.786796564403577,71.21320343559643)\">\r\n            <g transform=\"rotate(135)\">\r\n            <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#1c4595\" fillOpacity=\"0.625\">\r\n            <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"-0.5s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\r\n            <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"-0.5s\"></animate>\r\n            </circle>\r\n            </g>\r\n            </g><g transform=\"translate(20,50.00000000000001)\">\r\n            <g transform=\"rotate(180)\">\r\n            <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#1c4595\" fillOpacity=\"0.5\">\r\n            <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"-0.375s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\r\n            <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"-0.375s\"></animate>\r\n            </circle>\r\n            </g>\r\n            </g><g transform=\"translate(28.78679656440357,28.786796564403577)\">\r\n            <g transform=\"rotate(225)\">\r\n            <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#1c4595\" fillOpacity=\"0.375\">\r\n            <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"-0.25s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\r\n            <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"-0.25s\"></animate>\r\n            </circle>\r\n            </g>\r\n            </g><g transform=\"translate(49.99999999999999,20)\">\r\n            <g transform=\"rotate(270)\">\r\n            <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#1c4595\" fillOpacity=\"0.25\">\r\n            <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"-0.125s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\r\n            <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"-0.125s\"></animate>\r\n            </circle>\r\n            </g>\r\n            </g><g transform=\"translate(71.21320343559643,28.78679656440357)\">\r\n            <g transform=\"rotate(315)\">\r\n            <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#1c4595\" fillOpacity=\"0.125\">\r\n            <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"0s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\r\n            <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"0s\"></animate>\r\n            </circle>\r\n            </g>\r\n            </g>\r\n        </svg>\r\n    )\r\n}\r\n\r\nexport default Spinner;","export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        // <img src={process.env.PUBLIC_URL + '/error.gif'} alt=\"error\" /> exemple how tu use info from global folder\r\n        <img src={img} alt=\"error\" style={{display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto'}}/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { Component } from 'react';\nimport MarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage'\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nclass RandomChar extends Component{\n\n    constructor(props) {\n        super(props);\n        // this.updateChar(); // is bad desition! is owerflows the memory!! you can use the react huks!\n        // console.log('constructor')\n    }\n\n    // basik huks\n    // componentDidMount() => run once after the rendering\n    // componentDidUpdate() => update component\n    // componentWillUnmount() => if component dead clear all nodes, timouts, etc.. from componentDidMount()\n    // componentDidCatch() => if error\n\n    componentDidMount() {\n        // console.log('mount');\n        this.updateChar();\n    }\n\n    state = {\n        // create object char because state can be other info, errors, spinner etc...\n        // create object char with info about character\n        char: {},\n        loading: true,\n        error: false\n    }\n\n    // if want to work with a class you need to create an instance of it!!! \n    marvelService = new MarvelService();\n\n    // change info when is loaded\n    onCharLoaded = char => this.setState({\n        // change state.char and add new obj\n        char, \n        // change loading state when char is loaded\n        loading: false\n    });\n\n    onError = () => {\n        this.setState({\n            // change loading state when char is loaded\n            loading: false,\n            error: true\n        })\n    }\n\n    updateChar = () => {\n        // generate random id for a char\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n\n        // loading true\n        this.setState({loading : true});\n\n        // get character info and change the state\n        this.marvelService\n            .getCharacter(id)\n            /* \n            .then(this.onCharLoaded) is the same .then(res => this.setState(res))\n            if you call a function this function works with all elements in turn\n            */\n           \n            \n            // if info is loadded correctly\n            .then(this.onCharLoaded)\n            // if server return error\n            .catch(this.onError);\n    }\n\n    render() {\n        // console.log('render');\n        /* \n        destructuritzation of object char inside state.\n        const {char: {name, description, thumbnail, homepage, wiki}, loading} = this.state;\n        */\n\n\n        // get ellements from state\n        const {char, loading, error} = this.state,\n        // if exist error return error\n            errorMessage = error ? <ErrorMessage/> : null,\n        // if wait info from server return spinner\n            spinner = loading ? <Spinner/> : null,\n        // if doesn't exist error and spinner is null return content\n            content = !(loading || error) ? <View char={char}/> : null\n\n        return (\n            <div className=\"randomchar\">\n                {/* if loading true return animated spinner */}\n                {/* {loading ? <Spinner/> : <View char={char}/>} */}\n                { errorMessage }\n                { spinner }\n                { content }\n                <div className=\"randomchar__static\">\n                    <p className=\"randomchar__title\">\n                        Random character for today!<br/>\n                        Do you want to get to know him better?\n                    </p>\n                    <p className=\"randomchar__title\">\n                        Or choose another one\n                    </p>\n                    <button className=\"button button__main\">\n                        <div className=\"inner\" onClick={this.updateChar}>try it</div>\n                    </button>\n                    <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n                </div>\n            </div>\n        )\n    }\n}\n\n// create new componet with dinamic block, check it and generate spinner or info\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki} = char;\n    const imgStyle = thumbnail === \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\" ? {objectFit: 'contain'} : null\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" style={imgStyle} className=\"randomchar__img\"/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {/* check if exist descr and if not add custom text */}\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;\n","export default __webpack_public_path__ + \"static/media/abyss.93d211d3.jpg\";","import { Component } from 'react';\nimport MarvelService from '../../services/MarvelService';\n\nimport './charList.scss';\nimport abyss from '../../resources/img/abyss.jpg';\n\nclass CharList extends Component {\n    \n    state = {\n        list : [],\n        selected: 1\n    }\n\n    marvelService = new MarvelService(); // add service to variable and create instance of it\n\n    // #add components in the start\n    componentDidMount() {\n        // console.log('mount')\n        this.onAddChars();\n    }\n\n    // generate random id and check it if exists the same\n    onFilterSame = arr => {\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000); // generata random id\n        if(arr.some(el => el.id === id)) {\n            this.onFilterSame(arr);\n        } \n\n        return id;\n    }\n\n    // #get new random char from server\n    newRandomChar = () => {\n        \n        this.marvelService.getCharacter(this.onFilterSame(this.state.list)) // get element and change, filter it data\n            \n            .then(data => {this.onCharGenerate(data)}) // filter element info \n            \n            // .catch(data => {console.log(`error ${data}`)}) // if server not found\n            .catch(data => {\n                this.onCharGenerate({name: 'NoName', thumbnail: abyss, description: 'server not found'});\n                console.log(`Error Message: => ${data}`)\n            })\n    }\n\n    // #create new filtered char and add it to array\n    onCharGenerate = char => {\n        \n        const charInfo = { // filter char info\n            name: char.name,\n            thumbnail: char.thumbnail,\n            id: char.id\n        } \n\n        \n        this.setState(({list}) => { // change list and add obj(char) to it\n            return {\n                list: [...list, charInfo]\n            }\n        })\n    }\n\n    // #generate html list and pull info from state.list\n    renderItems = (arr) => {\n        \n        const newList = arr.map((item, i) => { // change array with chars and add to variable\n\n            const {name, thumbnail, id} = item; // get info of item\n            let imgStyle = thumbnail === \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\" ? {objectFit: 'contain'} : null\n            \n            return ( // return custom html(xhtml) code to variable\n                \n                <li onClick={ // check selected item and add class for it\n    \n                    () => {this.props.onCharSelected(id); this.setState({selected: i})} /* check id and change state.selected adding current el */ } \n                    key={id}\n                    className={`char__item ${i === this.state.selected ? 'char__item_selected' : ''}` /* check and add active class if index === selected */}>\n\n                    <img src={thumbnail} alt={name ? name : 'No img'} style={imgStyle}/>\n                    <div className=\"char__name\">{name ? name : 'No name'}</div>\n                </li>\n            );\n        })\n\n        return (\n            <ul className=\"char__grid\">\n                {newList}\n            </ul>\n        ); // return variable with created code\n    }\n\n    // #number of items add to list\n    onAddChars = (num = 9) => {\n        for (let i = 0; i < num; i++) {\n            this.newRandomChar();            \n        }\n    }\n\n\n    render() {\n        // console.log('render')\n\n        return (\n            <div className=\"char__list\">\n\n                {this.renderItems(this.state.list)}\n\n                <button className=\"button button__main button__long\" \n                        onClick={() => this.onAddChars(3)}>\n                    <div className=\"inner\">load more</div>\n                </button>\n            </div>\n        )\n    }\n}\n\nexport default CharList;\n\n\n\n\n// Random Char:\n// 1. change the char info to click inner(try it) btn and (check how to work with error)\n\n// CharList:\n// 3. delete random char and get chars in order or => filter list even when add new char and delet if char exists.\n","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { Component } from 'react';\nimport MarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Skeleton from '../skeleton/Skeleton';\nimport './charInfo.scss';\n\nclass CharInfo extends Component {\n\n    \n    state = {\n        // create object char because state can be other info, errors, spinner etc...\n        // create object char with info about character\n        char: null,\n        loading: false,\n        error: false\n    }\n\n    marvelService = new MarvelService(); // add service to variable and create instance of it\n\n    componentDidMount() {\n        this.updateChar();\n    }\n\n    componentDidUpdate(prevProps, prevStates) {\n        if(this.props.charId !== prevProps.charId) {\n            this.updateChar();\n        }\n    }\n\n    updateChar = () => {\n        const {charId} = this.props;\n        if(!charId) {\n            return;\n        }\n\n\n        // show the spinner\n        this.setState({loading : true});\n\n        this.marvelService\n            .getCharacter(charId)\n            .then(this.onCharLoaded)\n            .catch(this.onError);\n    }\n\n    \n    // change info when is loaded\n    onCharLoaded = char => this.setState({\n        // change state.char and add new obj\n        char, \n        // change loading state when char is loaded\n        loading: false\n    });\n\n    onError = () => {\n        this.setState({\n            // change loading state when char is loaded\n            loading: false,\n            error: true\n        })\n    }\n\n    render() {\n\n        // get ellements from state\n        const {char, loading, error} = this.state,\n\n            skeleton = char || loading || error ? null : <Skeleton/>,\n        // if exist error return error\n            errorMessage = error ? <ErrorMessage/> : null,\n        // if wait info from server return spinner\n            spinner = loading ? <Spinner/> : null,\n        // if doesn't exist error and spinner is null return content\n            content = !(loading || error || !char) ? <View char={char}/> : null\n\n        return (\n            <div className=\"char__info\">\n                {skeleton}\n                {errorMessage}\n                {spinner}\n                {content}\n            </div>\n        )\n    }\n}\n\n// add other components, breake the html and divide to differens components\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki, comics} = char;\n    let imgStyle = thumbnail === \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\" ? {objectFit: 'contain'} : null\n    return (\n        // <></> react fragment. if parent block unexists\n        <>\n        <div className=\"char__basics\">\n            <img src={thumbnail} style={imgStyle} alt=\"abyss\"/>\n            <div>\n                <div className=\"char__info-name\">{name}</div>\n                <div className=\"char__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n\n                {\n                    comics.map((item, i) => {\n                        return (\n                            <li key={i} className=\"char__comics-item\">\n                                {item.name}\n                            </li>\n                        )\n                    })\n                }\n\n            </ul>\n        </>\n    )\n}\n\nexport default CharInfo;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error, errorInfo);\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage />\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import { Component } from \"react\";\nimport AppHeader from \"../appHeader/AppHeader\";\nimport RandomChar from \"../randomChar/RandomChar\";\nimport CharList from \"../charList/CharList\";\nimport CharInfo from \"../charInfo/CharInfo\";\n\nimport decoration from '../../resources/img/vision.png';\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\n\nclass App extends Component {\n\n    state = {\n        selectedChar: null\n    }\n\n    onCharSelected = id => {\n        this.setState({selectedChar: id})\n    }\n\n    render() {\n        return (\n            <div className=\"app\">\n                <AppHeader/>\n                <main>\n                    <ErrorBoundary>\n                        <RandomChar/>\n                    </ErrorBoundary>\n                    <div className=\"char__content\">\n                        <ErrorBoundary>\n                            <CharList onCharSelected={this.onCharSelected}/>\n                        </ErrorBoundary>\n                        \n                        <ErrorBoundary>\n                            <CharInfo charId={this.state.selectedChar}/>\n                        </ErrorBoundary>\n                    </div>\n                    <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\n                </main>\n            </div>\n        )\n    }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app/App';\nimport './style/style.scss';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}