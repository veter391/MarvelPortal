{"version":3,"sources":["components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","resources/img/abyss.jpg","components/charList/CharList.js","components/errorBoundary/ErrorBoundary.js","resources/img/mjolnir.png","components/randomChar/RandomChar.js","resources/img/vision.png","components/pages/HomePage.js"],"names":["ErrorMessage","_jsx","src","img","alt","style","display","width","height","objectFit","margin","useMarvelService","_useHttp","_useState","useState","_useState2","_slicedToArray","loading","setLoading","_useState3","_useState4","error","setError","request","useCallback","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","url","method","body","headers","response","data","_args","arguments","wrap","_context","prev","next","length","undefined","fetch","sent","ok","Error","concat","status","json","abrupt","t0","message","stop","_x","apply","clearError","useHttp","_apiBase","_apiKey","getAllCharacters","num","offset","res","results","map","_transformCharacter","_x2","getCharacter","_ref2","_callee2","id","_context2","_x3","getAllComics","_ref3","_callee3","_args3","_context3","_transformComics","getComic","_ref4","_callee4","_context4","_x4","char","name","description","thumbnail","path","extension","homepage","urls","wiki","comics","items","slice","_comics$textObjects$","title","pageCount","language","textObjects","price","prices","Skeleton","_jsxs","_Fragment","children","className","View","imgStyle","href","item","i","CharInfo","charId","setChar","_useMarvelService","useEffect","updateChar","then","onCharLoaded","skeleton","errorMessage","spinner","Spinner","content","CharList","onCharSelected","list","setList","selected","setSelected","_useState5","_useState6","setOffset","newRandomChars","characters","onCharGenerate","charInfo","_toConsumableArray","arr","newList","onClick","onFocus","onKeyDown","event","key","tabIndex","renderItems","ErrorBoundary","props","handleError","errorInfo","console","log","window","addEventListener","removeEventListener","RandomChar","Math","floor","random","mjolnir","Home","selectedChar","decoration"],"mappings":"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","file":"static/js/3.6174d9af.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        // <img src={process.env.PUBLIC_URL + '/error.gif'} alt=\"error\" /> exemple how tu use info from global folder\r\n        <img src={img} alt=\"error\" style={{display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto'}}/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useHttp } from \"../hooks/http.hook\";\r\n\r\n\r\nconst useMarvelService = () => {\r\n\r\n    const { loading, request, error, clearError } = useHttp()\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/'\r\n    // personal api key\r\n    const _apiKey = 'apikey=d0cba7230807643ac1c3837fafb40afd'\r\n\r\n    // find all characters\r\n    const getAllCharacters = async (num, offset) => {\r\n        const res = await request(`${_apiBase}characters?limit=${num}&offset=${offset}&${_apiKey}`);\r\n\r\n        // map return callback function to each element is the same => ''.map(item => _transformCharacter(item))''\r\n        return res.data.results.map(_transformCharacter); \r\n    }\r\n\r\n    // return character with uniq id\r\n    const getCharacter = async id => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n\r\n        // return transformed element\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getAllComics = async (offset = 0) => {\r\n        const res = await request(\r\n            `${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`\r\n        );\r\n        return res.data.results.map(_transformComics);\r\n    };\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComics(res.data.results[0]);\r\n    };\r\n\r\n    // if function or variable starts with '_' be careful with changes!! try to NOT CHANGE IT\r\n    const _transformCharacter = (char) => {\r\n        // transform and return new object and add this to state(obj)\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? char.description : 'Not info about this character !',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items.length === 0 ? [{name: 'Not comics about this character !'}] : char.comics.items.slice(0, 10)\r\n        }\r\n    }\r\n\r\n    const _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            description: comics.description || \"There is no description\",\r\n            pageCount: comics.pageCount\r\n                ? `${comics.pageCount} p.`\r\n                : \"No information about the number of pages\",\r\n            thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n            language: comics.textObjects[0]?.language || \"en-us\",\r\n            price: comics.prices[0].price\r\n                ? `${comics.prices[0].price}$`\r\n                : \"not available\",\r\n        };\r\n    };\r\n\r\n    // return usable service variables\r\n    return { loading, error, getAllCharacters, getCharacter, clearError, getAllComics, getComic }\r\n\r\n}\r\n\r\n\r\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\r\n\r\nexport function useHttp() {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n\r\n        // before to send a request, setting loading(true)\r\n        setLoading(true);\r\n\r\n        try {\r\n            const response = await fetch(url, { method, body, headers });\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`)\r\n            }\r\n            \r\n            const data = await response.json();\r\n\r\n            // if everything gone okay disable loading\r\n            setLoading(false);\r\n            return data;\r\n\r\n        } catch (error) {\r\n            // if error disable loading\r\n            setLoading(false);\r\n            setError(error.message);\r\n            throw error;\r\n        }\r\n\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => setError(null), []);\r\n\r\n    return {loading, request, error, clearError}\r\n}","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { useEffect, useState } from 'react';\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Skeleton from '../skeleton/Skeleton';\nimport './charInfo.scss';\n\nfunction CharInfo({ charId }) {\n\n    const [char, setChar] = useState(null);\n\n    const { loading, error, getCharacter, clearError } = useMarvelService(); // add service to variable and create instance of it\n\n    useEffect(() => {\n        updateChar();\n    }, [charId]);\n\n    const updateChar = () => {\n        if(!charId) return;\n\n        // every request clear errors\n        clearError();\n        getCharacter(charId)\n            .then(onCharLoaded)\n    }\n\n    \n    // change info when is loaded\n    const onCharLoaded = char => {\n        // change state.char and add new obj\n        setChar(char);\n    };\n\n    const skeleton = char || loading || error ? null : <Skeleton/>,\n    // if exist error return error\n        errorMessage = error ? <ErrorMessage/> : null,\n    // if wait info from server return spinner\n        spinner = loading ? <Spinner/> : null,\n    // if doesn't exist error and spinner is null return content\n        content = !(loading || error || !char) ? <View char={char}/> : null\n\n    return (\n        <div className=\"char__info\">\n            {skeleton}\n            {errorMessage}\n            {spinner}\n            {content}\n        </div>\n    )\n}\n\n// add other components, breake the html and divide to differens components\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki, comics} = char;\n    let imgStyle = thumbnail === \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\" ? {objectFit: 'contain'} : null\n    return (\n        // <></> react fragment. if parent block unexists\n        <>\n        <div className=\"char__basics\">\n            <img src={thumbnail} style={imgStyle} alt=\"abyss\"/>\n            <div>\n                <div className=\"char__info-name\">{name}</div>\n                <div className=\"char__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n\n                {\n                    comics.map((item, i) => {\n                        return (\n                            <li key={i} className=\"char__comics-item\">\n                                {item.name}\n                            </li>\n                        )\n                    })\n                }\n\n            </ul>\n        </>\n    )\n}\n\nexport default CharInfo;","export default __webpack_public_path__ + \"static/media/abyss.93d211d3.jpg\";","import { useEffect, useState } from 'react';\nimport useMarvelService from '../../services/MarvelService';\n\nimport './charList.scss';\nimport abyss from '../../resources/img/abyss.jpg';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Spinner from '../spinner/Spinner';\n\nfunction CharList({ onCharSelected }) {\n\n    const [list, setList] = useState([])\n    const [selected, setSelected] = useState(1)\n    const [offset, setOffset] = useState(210);\n\n    const { loading, error, getAllCharacters } = useMarvelService(); // add service to variable and create instance of it\n\n    // #add components in the start\n    useEffect(() => {\n        // console.log('mount')\n        newRandomChars();\n    }, []);\n\n    // #get new random char from server\n    const newRandomChars = (characters = 9) => {\n        \n        getAllCharacters(characters, offset) // get element and change, filter it data\n            // .then(data => data.forEach(() => onFilterSame(list))) // filter element info \n            .then(data => data.map(item => onCharGenerate(item))) // filter element info \n\n    \n        setOffset(offset + characters)\n    }\n\n    // #create new filtered char and add it to array\n    const onCharGenerate = char => {\n        \n        const charInfo = { // filter char info\n            name: char.name,\n            thumbnail: char.thumbnail,\n            id: char.id\n        } \n\n        setList(list => [...list, charInfo])        \n    }\n\n    // #generate html list and pull info from state.list\n    const renderItems = (arr) => {\n        \n        const newList = arr.map((item, i) => { // change array with chars and add to variable\n\n            const {name, thumbnail, id} = item; // get info of item\n            let imgStyle = thumbnail === \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\" ? {objectFit: 'contain'} : null\n\n            const handleKeyPress = event => {\n                if (event.key === 'Enter' || event.key === 'Space') {\n                    onCharSelected(id);\n                }\n            }\n            \n            return ( // return custom html(xhtml) code to variable\n                \n                <li onClick={ // check selected item and add class for it\n    \n                    () => { onCharSelected(id); setSelected(i) } /* check id and change state.selected adding current el */ } \n                    onFocus={ () => { setSelected(i) } } \n                    onKeyDown={handleKeyPress}\n                    key={id}\n                    tabIndex='0'\n                    className={`char__item ${i === selected ? 'char__item_selected' : ''}` /* check and add active class if index === selected */}>\n                    \n                    <img src={thumbnail} alt={name ? name : 'No img'} style={imgStyle}/>\n                    <div className=\"char__name\">{name ? name : 'No name'}</div>\n                </li>\n            );\n        })\n\n        return (\n            <ul className=\"char__grid\">\n                {newList}\n            </ul>\n        ); // return variable with created code\n    }\n\n    const addMoreChars = () => {\n        newRandomChars(3)\n        setOffset(offset + 3)\n    }\n\n    const\n        // if exist error return error\n        errorMessage = error ? <ErrorMessage /> : null,\n        // if wait info from server return spinner\n        spinner = loading ? <Spinner /> : null,\n        // if doesn't exist error and spinner is null return content\n        content = renderItems(list)\n\n    return (\n        <div className=\"char__list\">\n            {errorMessage}\n            {content}\n            {spinner}\n\n            <button className=\"button button__main button__long\" \n                onClick={addMoreChars}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nexport default CharList;","import { useEffect, useState } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nfunction ErrorBoundary(props) {\r\n\r\n    const [error, setError] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const handleError = (error, errorInfo) => {\r\n            console.log(error, errorInfo);\r\n            setError(true);\r\n        };\r\n\r\n        window.addEventListener('error', handleError);\r\n\r\n        return () => {\r\n            window.removeEventListener('error', handleError);\r\n        };\r\n    }, [])\r\n\r\n    if (error) return <ErrorMessage />;\r\n\r\n    return props.children;\r\n}\r\n\r\nexport default ErrorBoundary;","export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { useEffect, useState } from 'react';\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage'\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nfunction RandomChar() {\n\n    useEffect(() => {\n        // console.log('mount');\n        updateChar();\n    }, []);\n\n    const [char, setChar] = useState({});\n\n    // if want to work with a class you need to create an instance of it!!! \n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n    // change info when is loaded\n    const onCharLoaded = char => {\n        // change state.char and add new obj\n        setChar(char);\n    };\n\n    const updateChar = () => {\n        // every request clear errors\n        clearError();\n        // generate random id for a char\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n\n        // get character info and change the state\n        getCharacter(id)\n            // if info is loadded correctly\n            .then(onCharLoaded)\n            // ! all errors is checked inside service hook!\n            // .catch(onError);\n    }\n\n    const\n    // if exist error return error\n        errorMessage = error ? <ErrorMessage/> : null,\n    // if wait info from server return spinner\n        spinner = loading ? <Spinner/> : null,\n    // if doesn't exist error and spinner is null return content\n        content = !(loading || error) ? <View char={char}/> : null\n\n    return (\n        <div className=\"randomchar\">\n            { errorMessage }\n            { spinner }\n            { content }\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button className=\"button button__main\">\n                    <div className=\"inner\" onClick={updateChar}>try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    )\n}\n\n// create new componet with dinamic block, check it and generate spinner or info\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki} = char;\n    const imgStyle = thumbnail === \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\" ? {objectFit: 'contain'} : null\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" style={imgStyle} className=\"randomchar__img\"/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {/* check if exist descr and if not add custom text */}\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;\n","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from \"react\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport CharList from \"../charList/CharList\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nfunction Home() {\r\n\r\n    const [selectedChar, setChar] = useState(null)\r\n\r\n    const onCharSelected = id => {\r\n        setChar(id)\r\n    }\r\n\r\n    return ( \r\n        <>\r\n            <ErrorBoundary>\r\n                <RandomChar/>\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n            <ErrorBoundary>\r\n                <CharList onCharSelected={onCharSelected}/>\r\n            </ErrorBoundary>\r\n\r\n            <ErrorBoundary>\r\n                <CharInfo charId={selectedChar}/>\r\n            </ErrorBoundary>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n        \r\n        </>\r\n     );\r\n}\r\n\r\nexport default Home;"],"sourceRoot":""}